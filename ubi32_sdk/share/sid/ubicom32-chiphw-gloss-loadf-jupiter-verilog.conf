# sid configuration file
# created by Id
# run by natg @ thor (Linux) at Wed Aug 26 11:33:03 PDT 2009
# args: --cpu ubicom32jupiter --board=chiphw-gloss-stdio test.elf --no-run
load libaudio.la audio_component_library
load libcache.la cache_component_library
load libcgencpu.la cgen_component_library
load libconsoles.la console_component_library
load libgdb.la gdb_component_library
load libgloss.la gloss_component_library
load libglue.la glue_component_library
load libhd44780u.la hd44780u_component_library
load libide.la ide_component_library
load libinterrupt.la interrupt_component_library
load libloader.la loader_component_library
load libVerilogLoader.la VerilogLoader_component_library
load libmailbox.la mbox_component_library
load libmapper.la mapper_component_library
load libmemory.la mem_component_library
#load libmmu.la mmu_component_library
load libjupiterMMU.la jupiterMMU_component_library
load libparport.la parport_component_library
load libprof.la prof_component_library
load librtc.la rtc_component_library
load libsched.la sched_component_library
load libtimers.la timer_component_library
load libuart.la uart_component_library
load libx86.la x86_component_library
# first section
# Some of these components are required to be instantiated by a particular name
# because sidlib accesses the component by name (using lookup_component()).
# The ones I know about are: cpu mmu
new hw-cpu-ubicom32jupiter cpu
new hw-mmu-ubicom32/jupiterMMU mmu
new hw-mapper-basic data-mapper
new hw-glue-sequence-8 init-sequence
new hw-glue-sequence-1 hw-reset-net
new hw-glue-sequence-8 deinit-sequence
new hw-glue-sequence-1 yield-net
new hw-glue-sequence-2 cache-flush-net
new sid-sched-host-accurate host-sched
new sid-sched-sim target-sched
# ubicom32 timers
new hw-timer-ubicom32/ref-generic ubicom32timer
# gloss
new sw-gloss-generic/libgloss gloss
# gloss <-> stdio
new sid-io-stdio stdio
# ubicom32jupiter harvard bus mappers
# cpu loader
#new sw-load-elf cpu-loader
new sw-load-Verilog cpu-loader
# second section
# settings
set cpu step-insn-count 10000
set host-sched num-clients 10 # large enough?
set target-sched num-clients 10 # large enough?
# pin connections
connect-pin main perform-activity -> host-sched advance
connect-pin main perform-activity -> target-sched advance
connect-pin main starting -> init-sequence input
connect-pin main stopping -> deinit-sequence input
connect-pin init-sequence output-0 -> hw-reset-net input
connect-pin hw-reset-net output-0 -> cpu reset!
set target-sched 0-name "CPU stepping"
connect-pin target-sched 0-event -> cpu step!
connect-pin target-sched 0-control <- cpu step-cycles
connect-pin target-sched time-query <- cpu time-query
connect-pin target-sched time-high -> cpu time-high
connect-pin target-sched time-low -> cpu time-low
connect-pin yield-net output-0 -> cpu yield
connect-pin yield-net output-0 -> host-sched yield
connect-bus cpu insn-memory data-mapper access-port
connect-bus cpu data-memory data-mapper access-port
# ubicom32 specific .
connect-pin target-sched 2-event -> ubicom32timer clockMptVal
connect-pin target-sched 3-event -> ubicom32timer clockSysVal
set target-sched 2-regular? 1 
set target-sched 2-time 1 
set target-sched 3-regular? 1 
set target-sched 3-time 1 
connect-pin hw-reset-net output-0 -> ubicom32timer reset
connect-pin ubicom32timer int_set_0 -> cpu irq_0
connect-pin ubicom32timer int_set_1 -> cpu irq_1
connect-pin ubicom32timer int_set_2 -> cpu irq_2
connect-pin ubicom32timer int_set_3 -> cpu irq_3
connect-pin ubicom32timer int_set_4 -> cpu irq_4
connect-pin ubicom32timer int_set_5 -> cpu irq_5
connect-pin ubicom32timer int_set_6 -> cpu irq_6
connect-pin ubicom32timer int_set_7 -> cpu irq_7
connect-pin ubicom32timer wd_rst_out -> hw-reset-net input
connect-pin ubicom32timer int_set_rttmr -> cpu rttmr-interrupt
# gloss
relate gloss cpu cpu
connect-pin init-sequence output-2 -> gloss reset
connect-pin cpu trap <-> gloss trap
connect-pin cpu trap-code -> gloss trap-code
set gloss verbose? 0
connect-bus gloss target-memory data-mapper access-port
# gloss <-> stdio
set host-sched 0-regular? 1
set host-sched 0-time 150 # apprx. human perception limit
connect-pin host-sched 0-event -> stdio poll
connect-pin gloss debug-tx -> stdio stdout
connect-pin gloss debug-rx <- stdio stdin
# gloss w/o gdb
connect-pin gloss process-signal -> main stop!
connect-pin gloss process-signal -> yield-net input
# ubicom32jupiter harvard bus specific.
disconnect-bus cpu insn-memory data-mapper access-port
connect-bus cpu insn-memory mmu insn-access-port
disconnect-bus cpu data-memory data-mapper access-port
# ubicom32jupiter harvard bus data mapping.
connect-bus cpu data-memory mmu data-access-port
# connect cpu to mmu
connect-bus mmu all data-mapper access-port
# ubicom32jupiter harvard bus specific gloss .
disconnect-bus gloss target-memory data-mapper access-port
connect-bus gloss target-memory data-mapper access-port
# ubicom32 specific gloss .
disconnect-bus gloss target-memory data-mapper access-port
connect-bus gloss target-memory cpu data-bus
set cpu engine-type pbb
# cpu loader
#set cpu-loader file "test.elf" 
set cpu-loader file "mem.image" 
connect-bus cpu-loader load-accessor-data data-mapper access-port
connect-bus cpu-loader load-accessor-insn data-mapper access-port
connect-pin init-sequence output-1 -> cpu-loader load!
connect-pin cpu-loader start-pc-set -> cpu start-pc-set!
connect-pin cpu-loader endian-set -> cpu endian-set!
connect-pin cpu-loader error -> main stop!
# ubicom32mars/ares/jupiter memory
new hw-memory-ram/rom-basic flashmem
set flashmem size 0x1000000
new hw-memory-ram/rom-basic onchipmem
set onchipmem size 0x40000
new hw-memory-ram/rom-basic offchipmem
set offchipmem size 0x40000000
new hw-memory-ram/rom-basic hrttable1
set hrttable1 size 0x100
new hw-memory-ram/rom-basic hrttable2
set hrttable2 size 0x100
new hw-memory-ram/rom-basic nrttable
set nrttable size 0x100
new hw-memory-ram/rom-basic iospace
#set iospace size 0x10000
# Scott HACK
set iospace size 0x10000000
new hw-memory-ram/rom-basic onchipperipheral
set onchipperipheral size 0x1000
# ubicom32mars/ares/jupiter memory mapping .
#connect-bus data-mapper flashmem:[0x60000000,0x60ffffff] flashmem read-write-port
#connect-bus data-mapper onchipmem:[0x3ffc0000,0x3fffffff] onchipmem read-write-port
#connect-bus data-mapper offchipmem:[0x40000000,0x47ffffff] offchipmem read-write-port
#connect-bus data-mapper iospace:[0x02000000,0x0200ffff] iospace read-write-port
#connect-bus data-mapper onchipperipheral:[0x01000000,0x01000fff] onchipperipheral read-write-port
#connect-bus data-mapper ubicom32timer:[0xa00,0xaff] ubicom32timer Timer-bus
# jupiter MMU
connect-bus data-mapper flashmem:[0xb0000000,0xb0ffffff] flashmem read-write-port
connect-bus data-mapper onchipmem:[0xbffc0000,0xbfffffff] onchipmem read-write-port
connect-bus data-mapper offchipmem:[0xc0000000,0xffffffff] offchipmem read-write-port
connect-bus data-mapper iospace:[0xba000000,0xbaffffff] iospace read-write-port
connect-bus data-mapper onchipperipheral:[0xb9000000,0xb9000fff] onchipperipheral read-write-port
#connect-bus data-mapper ubicom32timer:[0xa00,0xaff] ubicom32timer Timer-bus
connect-bus data-mapper hrttable1:[0xb8000800,0xb80008ff] hrttable1 read-write-port
connect-bus data-mapper hrttable2:[0xb8000900,0xb80009ff] hrttable2 read-write-port
connect-bus data-mapper  nrttable:[0xb8000a00,0xb8000a1f] nrttable  read-write-port
# ubicom32 syscall enablement .
set cpu syscall-trap 57
